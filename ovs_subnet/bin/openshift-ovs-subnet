#!/bin/bash
set -ex

action=$1
pod_namespace=$2
pod_name=$3
net_container=$4

source /etc/openshift-sdn/config.env
cluster_subnet_mask=${OPENSHIFT_CLUSTER_SUBNET_MASK}
tap_ip=${OPENSHIFT_SDN_TAP1_ADDR}
sdn_ipam_server=${OPENSHIFT_SDN_IPAM_SERVER}

case $action in
	"init")
		Init()
	;;
	"setup")
		Setup()
	;;
	"teardown")
		Teardown()
	;;
	*)
		echo "Bad input: $@"
		exit(1)
esac

Init() {
	# pass
}

Setup() {
	new_ip=$(curl ${sdn_ipam_server}/netutils/ip)
	pid=$(docker inspect --format "{{.State.Pid}}" ${net_container})
	ipaddr=$(docker inspect --format "{{.NetworkSettings.IPAddress}}" ${net_container})
	ipaddr_sub=$(docker inspect --format "{{.NetworkSettings.IPPrefixLen}}" ${net_container})
	veth_host=$(jq .network_state.veth_host /var/lib/docker/execdriver/native/${net_container}/state.json | tr -d '"')

	brctl delif docker0 $veth_host
	ovs-vsctl add-port br0 ${veth_host} 
	ovs_port=$(ovs-ofctl -O OpenFlow13 dump-ports-desc br0  | grep ${veth_host} | cut -d "(" -f 1 | tr -d ' ')
	ovs-ofctl -O OpenFlow13 add-flow br0 "table=0,cookie=0x${ovs_port},priority=100,ip,nw_dst=${new_ip},actions=output:${ovs_port}"
	ovs-ofctl -O OpenFlow13 add-flow br0 "table=0,cookie=0x${ovs_port},priority=100,arp,nw_dst=${new_ip},actions=output:${ovs_port}"

	del_ip_cmd="ip addr del $ipaddr/$ipaddr_sub dev eth0"
	nsenter -n -t $pid -- $del_ip_cmd

	add_ip_cmd="ip addr add $new_ip/$cluster_subnet_mask dev eth0"
	nsenter -n -t $pid -- $add_ip_cmd

	add_default_cmd="ip route add default via $tap_ip"
	nsenter -n -t $pid -- $add_default_cmd
}

Teardown() {
	veth_host=$(jq .network_state.veth_host /var/lib/docker/execdriver/native/${net_container}/state.json | tr -d '"')
	ovs_port=$(ovs-ofctl -O OpenFlow13 dump-ports-desc br0  | grep ${veth_host} | cut -d "(" -f 1 | tr -d ' ')
	ovs-vsctl del-port $veth_host
	ovs-ofctl -O OpenFlow13 del-flows br0 "table=0,cookie=0x${ovs_port}/0xffffffff"
}
